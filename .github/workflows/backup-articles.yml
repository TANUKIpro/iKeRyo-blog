name: 💾 記事バックアップ

on:
  schedule:
    # 毎週月曜日の午前3時（JST）に実行
    - cron: '0 18 * * 0'
  workflow_dispatch:

jobs:
  backup-wordpress:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 チェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 依存関係インストール
        run: |
          pip install -r requirements.txt
      
      - name: 💾 WordPressからバックアップ取得
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USERNAME: ${{ secrets.WP_USERNAME }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
        run: |
          cat > scripts/backup_wordpress.py << 'EOF'
          import os
          import json
          from datetime import datetime
          from pathlib import Path
          from wordpress_api import WordPressAPI
          
          def backup_posts():
              api = WordPressAPI(
                  os.getenv('WP_URL'),
                  os.getenv('WP_USERNAME'),
                  os.getenv('WP_APP_PASSWORD')
              )
              
              # バックアップディレクトリ作成
              backup_dir = Path('backups') / datetime.now().strftime('%Y%m%d')
              backup_dir.mkdir(parents=True, exist_ok=True)
              
              # すべての投稿を取得
              page = 1
              all_posts = []
              
              while True:
                  posts = api.get_posts(page=page, per_page=100)
                  if not posts:
                      break
                  all_posts.extend(posts)
                  page += 1
              
              print(f"📊 取得した投稿数: {len(all_posts)}")
              
              # 投稿をJSON形式で保存
              for post in all_posts:
                  post_data = {
                      'id': post['id'],
                      'title': post['title']['rendered'],
                      'content': post['content']['rendered'],
                      'status': post['status'],
                      'date': post['date'],
                      'modified': post['modified'],
                      'categories': post['categories'],
                      'tags': post['tags'],
                      'meta': post.get('meta', {})
                  }
                  
                  # ファイル名を生成
                  safe_title = "".join(c for c in post_data['title'] if c.isalnum() or c in (' ', '-', '_')).rstrip()
                  filename = f"{post_data['id']}_{safe_title[:50]}.json"
                  
                  # 保存
                  file_path = backup_dir / filename
                  with open(file_path, 'w', encoding='utf-8') as f:
                      json.dump(post_data, f, ensure_ascii=False, indent=2)
              
              # バックアップサマリー作成
              summary = {
                  'backup_date': datetime.now().isoformat(),
                  'total_posts': len(all_posts),
                  'posts_by_status': {
                      'publish': len([p for p in all_posts if p['status'] == 'publish']),
                      'draft': len([p for p in all_posts if p['status'] == 'draft']),
                      'private': len([p for p in all_posts if p['status'] == 'private'])
                  }
              }
              
              with open(backup_dir / 'summary.json', 'w') as f:
                  json.dump(summary, f, indent=2)
              
              return summary
          
          # WordPressAPIにget_postsメソッドを追加
          def add_get_posts_method():
              from wordpress_api import WordPressAPI
              
              def get_posts(self, page=1, per_page=10, status='any'):
                  url = f"{self.wp_url}/wp-json/wp/v2/posts"
                  params = {
                      'page': page,
                      'per_page': per_page,
                      'status': status
                  }
                  response = requests.get(url, headers=self.headers, params=params)
                  if response.status_code == 200:
                      return response.json()
                  return []
              
              WordPressAPI.get_posts = get_posts
          
          if __name__ == "__main__":
              import requests
              add_get_posts_method()
              summary = backup_posts()
              print(f"✅ バックアップ完了: {summary['total_posts']}件の投稿を保存")
          EOF
          
          python scripts/backup_wordpress.py
      
      - name: 📊 バックアップレポート
        run: |
          echo "## 💾 WordPress記事バックアップ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          BACKUP_DIR=$(find backups -type d -name "[0-9]*" | sort -r | head -1)
          if [ -f "$BACKUP_DIR/summary.json" ]; then
            cat "$BACKUP_DIR/summary.json" | jq -r '
              "- **バックアップ日時:** " + .backup_date + "\n" +
              "- **総記事数:** " + (.total_posts | tostring) + "\n" +
              "- **公開記事:** " + (.posts_by_status.publish | tostring) + "\n" +
              "- **下書き:** " + (.posts_by_status.draft | tostring) + "\n" +
              "- **非公開:** " + (.posts_by_status.private | tostring)
            ' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 💾 バックアップをコミット
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backups/
          git commit -m "💾 WordPress記事バックアップ - $(date +%Y%m%d)" || echo "変更なし"
          git push || echo "プッシュ不要"
      
      - name: 🧹 古いバックアップの削除
        run: |
          # 30日以上前のバックアップを削除
          find backups -type d -name "[0-9]*" -mtime +30 -exec rm -rf {} + || true
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🧹 古いバックアップを削除"
            git push
          fi